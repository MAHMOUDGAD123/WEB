@layer framie, test;

@layer test {
  #grid-box {
    width: 100%;
    display: grid;
    gap: 10px;
    
    & > span {
      /* --d: 100px; */
      width: var(--d);
      height: var(--d);
      border-radius: 10px;

      &.red {
        background-color: #f00;
      }
      &.blue {
        background-color: #00f;
      }
      &.green {
        background-color: #0f0;
      }
      &.orange {
        background-color: #ffa500;
      }
      &.violet {
        background-color: violet;
      }
      &.dark {
        background-color: black;
      }
    }
  }

  /* grid-template-(columns | rows) */
  .ex-1 {
    /* [grid-template-rows] have the same syntax as [grid-template-columns] */

    /* grid-template-columns: max-content 2fr minmax(min-content, 200px) fit-content(100px) 1fr; */
    /* grid-template-columns: repeat(3, minmax(100px, 1fr)); */
    /* grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); */
    /* grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); */
    /* grid-template-columns: repeat(2, auto min-content 50px); */
    /* grid-template-columns: auto; */
    
    /* grid-template-rows: repeat(5, 1fr); */
    /* grid-template-rows: repeat(3, 1fr 100px 3fr); */
    /* grid-template-rows: auto; */
    
    /* grid-template-rows: [r1] 1fr [r2] 1fr [r3] 1fr [r4]; */
    /* grid-template-columns: [c1] 1fr [c2] 1fr [c3] 1fr [c4]; */
    /* & > span.red {
      grid-column: c1 / c3;
      grid-row: r1 / r3;
    } */

    /* using shorthands */

    /* grid-template: none / repeat(auto-fill, minmax(150px, 1fr));
    grid-auto-rows: 150px; */

    /* this is the same as the next */

    grid: auto-flow 150px / repeat(auto-fill, minmax(150px, 1fr));
  }

  /* grid-template-areas */
  .ex-2 {
    /* grid-template: repeat(5, 1fr) / repeat(5, 1fr);
    grid-template-areas: 
            ". . d o b"
            "r r d o b"
            "g g d v b"
            "g g d v b"
            "g g d . ."
    ; */

    /* using shorthand
      ------: <grid-template-areas> <grid-template-rows>
              / <grid-template-columns>
    */
    grid-template: 
            [r1-s] "r . d o b" 1fr [r1-e]
            [r2-s] "r . d o b" 1fr [r2-e]
            [r3-s] ". g d . b" 1fr [r3-e]
            [r4-s] ". g d v b" 1fr [r4-e]
            [r5-s] ". g d v ." 1fr [r5-e]
            / 1fr 50px max-content 60px 100px
    ;
    
    & > span {
      &.red {
        grid-area: r;
      }
      &.blue {
        grid-area: b;
      }
      &.green {
        grid-area: g;
      }
      &.orange {
        grid-area: o;
      }
      &.violet {
        grid-area: v;
      }
      &.dark {
        grid-area: d;
      }
    }
  }

  /* grid-auto-(rows | columns | flow) */
  .ex-3 {
    /* auto-placement algorithm */

    /* default is -> row */
    /* [dense] -> fill the free spaces */

    grid-template: none / 1fr 1fr 1fr;
    grid-auto-rows: 1fr 2fr 3fr;
    grid-auto-flow: row;
    & > span.red {
      grid-column-start: 3;
    }
    
    /* grid-template: 1fr 2fr 3fr / none;
    grid-auto-columns: 1fr 2fr 3fr;
    grid-auto-flow: column;
    & > span.red {
      grid-row-start: 3;
    } */
  }

  /* grid shorthand */
  .ex-4 {
    /* (1) <grid-template> */
    /* grid: 1fr 1fr / 1fr 1fr; */

    /* (2) <grid-template-rows> / [ auto-flow && dense? ] <grid-auto-columns>? */
    /* grid: auto-flow dense 150px / repeat(4, 1fr); */
    

    /* (3) [ auto-flow && dense? ] <grid-auto-rows>? / <grid-template-columns>? */
    grid: repeat(4, 1fr) / auto-flow dense 110px;
  }

  /* grid-column-* & grid-row-* & grid-area(shorthand) */
  .ex-5 {
    block-size: 450px;
    grid-template: 
          [r1s] "a b c d e f" 1fr [r1e]
          [r2s] "g h i j k l" 1fr [r2e]
          [r3s] "m n o p q r" 1fr [r3e]
          [r4s] "s t u v w x" 1fr [r4e]
          [r5s] "y z A B C D" 1fr [r5e]
          [r6s] "E F G H I J" 1fr [r6e]
          / [c1] 1fr [c2] 1fr [c3] 1fr [c4] 1fr [c5] 1fr [c6] 1fr [c7]
    ;

    /*
   c1   c2   c3   c4   c5   c6   c7
------------------------------------ r1s
      a    b    c    d    e    f
------------------------------------ r1e/r2s
      g    h    i    j    k    l
------------------------------------ r2e/r3s
      m    n    o    p    q    r
------------------------------------ r3e/r4s
      s    t    u    v    w    x
------------------------------------ r4e/r5s
      y    z    A    B    C    D
------------------------------------ r5e/r6s
      E    F    G    H    I    J
------------------------------------ r6e
    */

    /* 
      { r(n)e === r(n+1)s } ---> ex: r1e equals to r2s
    */

    & > span {
      &.red {
        grid-column: c1 / c6;
        grid-row-start: r1s;
        grid-row-end: r1e;
      }
      &.green {
        grid-row: r1s / r5e;
        grid-column: c6;
      }
      &.blue {
        /* grid-row-s / grid-column-s / grid-row-e / grid-column-e */
        grid-area: r6s / -1 / auto / -6;
      }
      &.orange {
        grid-row: g / -1;
        grid-column: c1 / c2;
      }
      &.violet {
        grid-row: h / r3e;
        grid-column: 4 span;
      }
      &.dark {
        grid-row: 4 / z;
        grid-column-start: 2;
        grid-column-end: span 4;
      }
    }
  }

  /* place (content & items & self) */
  .ex-6 {
    block-size: 450px;
    grid: none / repeat(12, 1fr);
    grid-template-areas: 
            "r r r r g g g g b b b b"
            "r r r r g g g g b b b b"
            "o o o o v v v v d d d d"
            "o o o o v v v v d d d d"
    ;

    /* degault is (stretch) */

    /* <align-content> <justify-content>? */
    place-content: stretch stretch;

    /* <align-items> <justify-items>? */
    place-items: stretch stretch;

    & > span {
      /* <align-self> <jsutify-self>? */
      &.red {
        grid-area: r;
        /* place-self: start stretch; */
        /* using margin */
        margin-bottom: auto; 
      }
      &.green {
        grid-area: g;
        place-self: end stretch;
      }
      &.blue {
        grid-area: b;
        place-self: center stretch;
      }
      &.orange {
        grid-area: o;
        place-self: end stretch;
      }
      &.violet {
        grid-area: v;
        place-self: start stretch;
      }
      &.dark {
        grid-area: d;
        place-self: center stretch;
      }
    }
  }

  /* repeated lines with the same name */
  .ex-7 {
    grid: auto / repeat(15, [line] 1fr);

    & > span{
      &.red {
        /* from 1st line to 4th line */
        grid-column: line / line 4;
      }
      
      &.green {
        /* from 4th line and spane 5 */
        grid-column: line 4 / span 5;
      }
    } 
  }

  /* grid with { diplay: contents } */
  #grid-contents {
    display: grid;
    width: 100%;
    grid: auto-flow 150px / repeat(3, 1fr);
    gap: 25px;
    position: relative;

    & > .controls {
      display: flex;
      place-items: center;
      gap: 20px;
      position: absolute;
      bottom: -50px;
      right: 10px;
    }
  }

  /* auto placement algorithm */
  #auto-placement {
    display: flex;
    flex-flow: column;
    gap: 30px;
    width: 100%;
    
    & > #grid-box {
      background-color: #aaa;
      padding: 10px;
      border-radius: 10px;
      grid-template: 1fr 1fr 1fr / 1fr 1fr 1fr;
      /* grid-auto-flow: row; */

      & > span {
        &.red {
          grid-column-start: 3;
        }

        &.green {
          grid-row-start: 3;
        }
      }
    } 

    & > .controls {
      display: flex;
      place-content: flex-start;
      gap: 30px;
    }
  }

  /* subgrid */
  #subgrid-box-1 {  
    display: grid;
    inline-size: 500px;
    block-size: 500px;
    grid-template: repeat(5, 1fr) / repeat(10, 1fr);

    & > :only-child {
      background-color: aquamarine;
      border-radius: 10px;
      display: grid;
      grid-column: 2 / 10;
      grid-row: 2 / 5;
      grid-template: subgrid / subgrid;
      
      & > :only-child {
        border-radius: 10px;
        grid-column: 3 / 7;
        grid-row: 2 / 3;
      }
    }
  }
  #subgrid-box-2 {  
    display: grid;
    inline-size: 500px;
    block-size: 500px;
    grid-template: 1fr [r_begin] 1fr 1fr [r_end] 1fr 1fr / repeat(3, 1fr) [c_begin] repeat(3, 1fr) [c_end] 1fr;
    gap: 5px;

    & > :only-child {
      background-color: aquamarine;
      padding: 5px;
      display: grid;
      grid-column: 1 / 8;
      grid-row: 2 / 5;
      grid-template: 
              subgrid [rl-1] [rl-2] [rl-3] [rl-4] /
              subgrid [cl-1] [cl-2] [cl-3] [cl-4] [cl-5] [cl-6] [cl-7] [cl-8];
      
      & > :first-child {
        grid-column: c_begin / c_end;
        grid-row: r_begin / r_end;
      }

      & > :last-child {
        grid-column: cl-1 / cl-3;
        grid-row: rl-2 / rl-4;
      }
    }

  }
  #subgrid-box-3 {  
    display: grid;
    inline-size: 500px;
    block-size: 500px;
    grid-template: repeat(5, 1fr) / repeat(10, 1fr);
    gap: 5px;

    & > :only-child {
      background-color: aquamarine;
      padding: 5px;
      display: grid;
      grid-column: 4 / 8;
      grid-row: 2 / 5;
      grid-template: subgrid / subgrid; /* auto grid */
    }
  }

  /* masonry */
  #masonry-grid {
    /* activate it at firefox first from (about:config) page -> true */
    width: 100%;
    display: grid;
    gap: 5px;
    grid-template: masonry / repeat(3, minmax(100px, 1fr));
    align-tracks: center, start, end, space-between, space-evenly;
    /* justify-tracks: end; */

    /* masonry-auto-flow: pack; */
    /* masonry-auto-flow: ordered; */
    /* masonry-auto-flow: definite-first; */
    /* masonry-auto-flow: next; */
    masonry-auto-flow: next ordered;
    
    --height: 1em;

    & > :nth-child(1) {
      height: calc(2 * var(--height));
    }
    & > :nth-child(2) {
      height: calc(8 * var(--height));
    }
    & > :nth-child(3) {
      height: calc(4 * var(--height));
    }
    & > :nth-child(4) {
      height: calc(7 * var(--height));
    }
    & > :nth-child(5) {
      height: calc(3 * var(--height));
    }
    & > :nth-child(6) {
      height: calc(10 * var(--height));
    }
    & > :nth-child(7) {
      height: calc(10 * var(--height));
    }
    & > :nth-child(9) {
      height: calc(4 * var(--height));
    }
    & > :nth-child(10) {
      height: calc(5 * var(--height));
    }
    & > :nth-child(11) {
      height: calc(7 * var(--height));
    }
    & > :nth-child(12) {
      height: calc(4 * var(--height));
    }
  }
  

  /* challenges */

  [id|="challenge"] {
    width: 100%;
    display: grid;
    gap: 10px;
  }

  #challenge-1 {

  }
}
